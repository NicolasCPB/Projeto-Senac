# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'register.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from logging import fatal
from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector
import re

connection = mysql.connector.connect(host='localhost', user='root', password='x132131x', db='db_accounts')
cursor = connection.cursor()
regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
error = True

class Register_Window(object):
        global error
        def register(self):
                def check(email):
                        if(re.fullmatch(regex, email)):
                                return True
                        else:
                                return False
                                
                def showMessage(message):
                        self.label_error.setText(message)
                        self.frame_error.setStyleSheet("QFrame {\n"
                        "background-color: rgb(201, 8, 8);\n"
                        "border-radius: 5px;\n"
                        "}\n")
                        self.frame_error.show()   

                if self.LineEdit_User.text() == '' or self.LineEdit_Password.text() == '' or self.LineEdit_Email.text() == '' or self.LineEdit_Confirm_Password.text() == '':
                        text = 'Preencha todos os campos'
                        showMessage(text)
                        error = True

                elif self.LineEdit_Password.text() != self.LineEdit_Confirm_Password.text():
                        text = 'As senhas não são iguais'
                        showMessage(text)
                        error = True
                else:
                        get_datas = "select * from tb_accounts"
                        cursor.execute(get_datas)
                        lines = cursor.fetchall()
                        flag = False
                        for line in lines:
                                if line[1] == self.LineEdit_User.text() or line[3] == self.LineEdit_Email.text().lower():
                                        flag = True
                        if flag:
                                text = 'Usuário e/ou email já cadastrado'
                                showMessage(text)
                                error = True

                        elif check(self.LineEdit_Email.text()) == False:
                                text = 'Email inválido'
                                showMessage(text)
                                error = True
                        else:
                                cursor.execute(f"INSERT INTO tb_accounts (user, password, email) values ('{self.LineEdit_User.text()}', '{self.LineEdit_Password.text()}', '{self.LineEdit_Email.text()}')")
                                connection.commit()
                                error = False
                return error
                                
                        
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(787, 700)
                MainWindow.setMinimumSize(QtCore.QSize(500, 700))
                MainWindow.setStyleSheet("color: rgb(200, 200, 200);\n"
                "background-color: rgb(10, 10, 10);")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
                self.verticalLayout.setContentsMargins(0, 0, 0, 0)
                self.verticalLayout.setSpacing(0)
                self.verticalLayout.setObjectName("verticalLayout")
                self.top_bar = QtWidgets.QFrame(self.centralwidget)
                self.top_bar.setMaximumSize(QtCore.QSize(16777215, 35))
                self.top_bar.setStyleSheet("")
                self.top_bar.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.top_bar.setFrameShadow(QtWidgets.QFrame.Raised)
                self.top_bar.setObjectName("top_bar")
                self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.top_bar)
                self.horizontalLayout_2.setContentsMargins(0, 5, 0, 0)
                self.horizontalLayout_2.setSpacing(0)
                self.horizontalLayout_2.setObjectName("horizontalLayout_2")
                self.frame_error = QtWidgets.QFrame(self.top_bar)
                self.frame_error.setMaximumSize(QtCore.QSize(450, 16777215))
                self.frame_error.setStyleSheet("border-radius: 5px""")
                self.frame_error.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.frame_error.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_error.setObjectName("frame_error")
                self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_error)
                self.horizontalLayout_3.setContentsMargins(10, 3, 3, 10)
                self.horizontalLayout_3.setSpacing(6)
                self.horizontalLayout_3.setObjectName("horizontalLayout_3")
                self.label_error = QtWidgets.QLabel(self.frame_error)
                self.label_error.setStyleSheet("color: rgb(35, 35, 35);")
                self.label_error.setAlignment(QtCore.Qt.AlignCenter)
                self.label_error.setObjectName("label_error")
                self.horizontalLayout_3.addWidget(self.label_error)
                self.bt_close = QtWidgets.QPushButton(self.frame_error)
                self.bt_close.setMaximumSize(QtCore.QSize(20, 20))
                self.bt_close.setStyleSheet("QPushButton {\n"
                "    background-image: url(:/Close_Image/cil-x.png);\n"
                "    border-radius: 5px;\n"
                "    background-position: center;\n"
                "    background-color: rgb(60, 60, 60);\n"
                "}\n"
                "QPushButton:hover {\n"
                "    color: rgb(200, 200, 200);\n"
                "    background-color:rgb(50, 50, 50);\n"
                "}\n"
                "QPushButton:pressed {\n"
                "    color: rgb(200, 200, 200);\n"
                "    background-color:rgb(35, 35, 35);\n"
                "}")
                self.bt_close.setText("")
                self.bt_close.setObjectName("bt_close")
                self.horizontalLayout_3.addWidget(self.bt_close)
                self.horizontalLayout_2.addWidget(self.frame_error)
                self.verticalLayout.addWidget(self.top_bar)
                self.content = QtWidgets.QFrame(self.centralwidget)
                self.content.setStyleSheet("")
                self.content.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.content.setFrameShadow(QtWidgets.QFrame.Raised)
                self.content.setObjectName("content")
                self.horizontalLayout = QtWidgets.QHBoxLayout(self.content)
                self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
                self.horizontalLayout.setSpacing(0)
                self.horizontalLayout.setObjectName("horizontalLayout")
                self.register_area = QtWidgets.QFrame(self.content)
                self.register_area.setMaximumSize(QtCore.QSize(450, 550))
                self.register_area.setStyleSheet("background-color: rgb(30, 30, 30);\n"
                "border-radius: 10px solid;")
                self.register_area.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.register_area.setFrameShadow(QtWidgets.QFrame.Raised)
                self.register_area.setObjectName("register_area")


                self.LineEdit_User = QtWidgets.QLineEdit(self.register_area)
                self.LineEdit_User.setGeometry(QtCore.QRect(85, 190, 280, 50))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(10)
                self.LineEdit_User.setFont(font)
                self.LineEdit_User.setStyleSheet("QLineEdit {\n"
                "    border: 2px solid rgb(45, 45, 45);\n"
                "    border-radius: 5px;\n"
                "    padding: 15px;\n"
                "    background-color: rgb(30, 30, 30);\n"
                "    color: rgb(100, 100, 100);\n"
                "}\n"
                "\n"
                "QLineEdit:hover {\n"
                "    border: 2px solid rgb(55, 55, 55);\n"
                "}\n"
                "\n"
                "QLineEdit:focus {\n"
                "    border: 2px solid rgb(255, 207, 0);\n"
                "    color: rgb(200, 200, 200);\n"
                "}")
                self.LineEdit_User.setMaxLength(32)
                self.LineEdit_User.setObjectName("LineEdit_User")







                self.LineEdit_Email = QtWidgets.QLineEdit(self.register_area)
                self.LineEdit_Email.setGeometry(QtCore.QRect(85, 250, 280, 50))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(10)
                self.LineEdit_Email.setFont(font)
                self.LineEdit_Email.setStyleSheet("QLineEdit {\n"
                "    border: 2px solid rgb(45, 45, 45);\n"
                "    border-radius: 5px;\n"
                "    padding: 15px;\n"
                "    background-color: rgb(30, 30, 30);\n"
                "    color: rgb(100, 100, 100);\n"
                "}\n"
                "\n"
                "QLineEdit:hover {\n"
                "    border: 2px solid rgb(55, 55, 55);\n"
                "}\n"
                "\n"
                "QLineEdit:focus {\n"
                "    border: 2px solid rgb(255, 207, 0);\n"
                "    color: rgb(200, 200, 200);\n"
                "}")
                self.LineEdit_Email.setMaxLength(32)
                self.LineEdit_Email.setObjectName("LineEdit_Email")




















                self.LineEdit_Password = QtWidgets.QLineEdit(self.register_area)
                self.LineEdit_Password.setGeometry(QtCore.QRect(85, 310, 280, 50))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(10)
                self.LineEdit_Password.setFont(font)
                self.LineEdit_Password.setStyleSheet("QLineEdit {\n"
                "    border: 2px solid rgb(45, 45, 45);\n"
                "    border-radius: 5px;\n"
                "    padding: 15px;\n"
                "    background-color: rgb(30, 30, 30);\n"
                "    color: rgb(100, 100, 100);\n"
                "}\n"
                "\n"
                "QLineEdit:hover {\n"
                "    border: 2px solid rgb(55, 55, 55);\n"
                "}\n"
                "\n"
                "QLineEdit:focus {\n"
                "    border: 2px solid rgb(255, 207, 0);\n"
                "    color: rgb(200, 200, 200);\n"
                "}")
                self.LineEdit_Password.setMaxLength(16)
                self.LineEdit_Password.setEchoMode(QtWidgets.QLineEdit.Password)
                self.LineEdit_Password.setObjectName("LineEdit_Password")





                self.LineEdit_Confirm_Password = QtWidgets.QLineEdit(self.register_area)
                self.LineEdit_Confirm_Password.setGeometry(QtCore.QRect(85, 370, 280, 50))
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                font.setPointSize(10)
                self.LineEdit_Confirm_Password.setFont(font)
                self.LineEdit_Confirm_Password.setStyleSheet("QLineEdit {\n"
                "    border: 2px solid rgb(45, 45, 45);\n"
                "    border-radius: 5px;\n"
                "    padding: 15px;\n"
                "    background-color: rgb(30, 30, 30);\n"
                "    color: rgb(100, 100, 100);\n"
                "}\n"
                "\n"
                "QLineEdit:hover {\n"
                "    border: 2px solid rgb(55, 55, 55);\n"
                "}\n"
                "\n"
                "QLineEdit:focus {\n"
                "    border: 2px solid rgb(255, 207, 0);\n"
                "    color: rgb(200, 200, 200);\n"
                "}")
                self.LineEdit_Confirm_Password.setMaxLength(16)
                self.LineEdit_Confirm_Password.setEchoMode(QtWidgets.QLineEdit.Password)
                self.LineEdit_Confirm_Password.setObjectName("LineEdit_Password")




                self.Bt_register = QtWidgets.QPushButton(self.register_area)
                self.Bt_register.setGeometry(QtCore.QRect(85, 450, 280, 50))
                self.Bt_register.setStyleSheet("QPushButton {\n"
                "    background-color: rgb(50, 50, 50);\n"
                "    border: 2px solid rgb(60, 60, 60);\n"
                "    border-radius: 5px;\n"
                "}\n"
                "\n"
                "QPushButton:hover {\n"
                "    background-color: rgb(60, 60, 60);\n"
                "    border: 2px solid rgb(70, 70, 70);\n"
                "}\n"
                "\n"
                "QPushButton:pressed {\n"
                "    background-color: rgb(250, 230, 0);\n"
                "    border: 2px solid rgb(255, 165, 24);\n"
                "    color: rgb(35, 35, 35);\n"
                "}")
                self.Bt_register.setObjectName("Bt_register")
                self.horizontalLayout.addWidget(self.register_area)
                self.verticalLayout.addWidget(self.content)
                self.bottom_bar_2 = QtWidgets.QFrame(self.centralwidget)
                self.bottom_bar_2.setMaximumSize(QtCore.QSize(16777215, 35))
                self.bottom_bar_2.setStyleSheet("background-color: rgb(15, 15, 15);")
                self.bottom_bar_2.setFrameShape(QtWidgets.QFrame.NoFrame)
                self.bottom_bar_2.setFrameShadow(QtWidgets.QFrame.Raised)
                self.bottom_bar_2.setObjectName("bottom_bar_2")
                self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.bottom_bar_2)
                self.verticalLayout_2.setObjectName("verticalLayout_2")
                self.label = QtWidgets.QLabel(self.bottom_bar_2)
                font = QtGui.QFont()
                font.setFamily("Segoe UI")
                self.label.setFont(font)
                self.label.setStyleSheet("color: rgb(75, 75, 75);\n"
                "background-color: rgb(15, 15, 15);")
                self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
                self.label.setObjectName("label")
                self.verticalLayout_2.addWidget(self.label)
                self.verticalLayout.addWidget(self.bottom_bar_2)
                MainWindow.setCentralWidget(self.centralwidget)

                #
                #Functions
                #

                #Button close Popup
                self.bt_close.clicked.connect(lambda: self.frame_error.hide())
                #Hide popup
                self.frame_error.hide()

                #Buton register
                #self.Bt_register.clicked.connect(self.register)


                #
                #
                #
                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "Register menu"))
                self.label_error.setText(_translate("MainWindow", "SENHA OU USUÁRIO INVÁLIDO(S)"))
                self.LineEdit_User.setPlaceholderText(_translate("MainWindow", "USER"))
                self.LineEdit_Email.setPlaceholderText(_translate("MainWindow", "EMAIL"))
                self.LineEdit_Password.setPlaceholderText(_translate("MainWindow", "PASSWORD"))
                self.LineEdit_Confirm_Password.setPlaceholderText(_translate("MainWindow", "CONFIRM PASSWORD"))
                self.Bt_register.setText(_translate("MainWindow", "REGISTER"))
                self.label.setText(_translate("MainWindow", "Created by: Nicolas Becker and Pedro"))
import files_rc


if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Register_Window()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())

